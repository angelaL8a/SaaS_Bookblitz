generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(cuid())
  firstName String @db.VarChar(150)
  lastName  String @db.VarChar(150)
  email     String @unique
  username  String @unique
  password  String

  userImageUrl String?
  userImageId  String?

  companies UserInCompany[] @relation("user")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserInCompany {
  id        String          @id @default(cuid())
  user      User            @relation("user", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  company   Company         @relation("company", fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String
  role      UserCompanyRole @default(Admin)

  telephone String?
  birthDate DateTime?
  gender    String?

  appointments Appointment[]
  shifts       Shift[]
  comments     CommentOnAppointment[]

  // strictly for employees
  position       String?
  startingDate   DateTime?
  paymentPerHour Float?
  city           String?
  state          String?
  zip            String?
  address        String?

  @@unique([userId, companyId])
}

model Company {
  id   String @id @default(cuid())
  name String
  url  String @unique

  users UserInCompany[] @relation("company")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shift {
  id           String   @id @default(cuid())
  checkInTime  DateTime
  checkOutTime DateTime
  date         DateTime

  employee     UserInCompany @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId   String
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id                  String            @id @default(cuid())
  referencialImageUrl String?
  referencialImageId  String?
  startTime           DateTime
  endTime             DateTime
  date                DateTime
  title               String            @db.VarChar(250)
  description         String            @db.VarChar(450)
  fee                 Float
  rating              Int?
  status              AppointmentStatus @default(Idle)

  shift   Shift  @relation(fields: [shiftId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shiftId String

  comments CommentOnAppointment[]

  client   UserInCompany @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  clientId String
}

model CommentOnAppointment {
  id      String @id @default(cuid())
  content String

  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  appointmentId String

  creator   UserInCompany @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId String
}

enum UserCompanyRole {
  Admin
  Employee
  Client
}

enum AppointmentStatus {
  Idle
  Started
  Finished
}
